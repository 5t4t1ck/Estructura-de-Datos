---
title: "Unidad 1: Pilas - Estructura de Datos"
subtitle: "Introducción a la Lógica"
date: "today"
author: "Lic. Diego Medardo Saavedra García Mg. Sc."
lang: "es"
format:
  revealjs:
    #chalkboard: 
      #buttons: false
    toc: true
    incremental: false
    slide-number: true
    preview-links: auto
    logo: img/logo.png
    footer: <https://espe.edu.ec>
    theme: dark
    makeindex: true
    multiplex: true
    transition: fade
    chalkboard: true #Pizarra
    auto-stretch: false
    smaller: false
    scrollable: true
    #presentation-title-slide-text-alig: left
    presentation-slide-text-align: center
    menu: true
    codeBlock: {data-trim: true}
    execute: true
    executeCode: true
  #html: 
    
    #code-fold: true
    #html-math-method: katex
    #multiplex: true
    #transition: fade
    #auto-stretch: false
bibliography: Bibliografia.bib
csl: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl"
editor_options: 
  chunk_output_type: console
---

# Pilas

## Introducción a Pilas

- Las Pilas son una estructura de datos lineal.
- Siguen el principio de LIFO (Last In, First Out).
- Útiles para llevar un seguimiento ordenado de elementos.

## ¿Cómo funcionan las Pilas?

- Imagina una pila de platos: el último plato apilado es el primero en ser retirado.
- Elementos se agregan y eliminan por un extremo, llamado "tope" de la pila.
- Acceso rápido al elemento más reciente y operaciones en orden inverso.

## Implementación en C++

```{c++}
#include <iostream>
#include <stack>

int main() {
    std::stack<int> pila;

    pila.push(10);
    pila.push(20);
    pila.push(30);

    while (!pila.empty()) {
        std::cout << pila.top() << " ";
        pila.pop();
    }

    return 0;
}

```
## Implementación en Python

```{python}

pila = []

pila.append(10)
pila.append(20)
pila.append(30)

while len(pila) > 0:
    print(pila[-1], end=" ")
    pila.pop()


```

## Implementación en Java.

```{java}
import java.util.Stack;

public class PilaExample {
    public static void main(String[] args) {
        Stack<Integer> pila = new Stack<>();

        pila.push(10);
        pila.push(20);
        pila.push(30);

        while (!pila.empty()) {
            System.out.print(pila.peek() + " ");
            pila.pop();
        }
    }
}

```

## Ejercicios con Pilas

1. Verificar si una expresión de paréntesis está balanceada.
2. Convertir un número decimal a binario.
3. Revertir el contenido de una pila.
4. Evaluar una expresión postfija.
5. Implementar una pila con capacidad limitada.

## Conclusión.

- Las Pilas son una estructura de datos importante en Estructura de Datos.
- Útiles para aplicaciones como verificación de balanceo de paréntesis y conversiones de números.
- Permite un acceso rápido al elemento más reciente y operaciones en orden inverso.

## 

¡Gracias por su atención!

# Bibliografía 

- Libro:

Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2009). Introduction to Algorithms (3rd ed.). The MIT Press.

- Artículos:

Smith, J. (2018). Stack Data Structure: Explained with Examples. Towards Data Science. https://towardsdatascience.com/stack-data-structure-explained-with-examples-3c669960b574

Gupta, S. (2020). Postfix to Infix Expression Conversion Using Stack. GeeksforGeeks. https://www.geeksforgeeks.org/postfix-to-infix/

- Sitios web:

Tutorialspoint. (s. f.). Data Structures and Algorithms - Stack. Recuperado el 19 de mayo de 2023, de https://www.tutorialspoint.com/data_structures_algorithms/stack_algorithm.htm

W3schools. (s. f.). Python Lists. Recuperado el 19 de mayo de 2023, de https://www.w3schools.com/python/python_lists.asp